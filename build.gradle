import com.install4j.gradle.Install4jTask

buildscript {
  repositories {
    mavenCentral()
    maven {
      url 'http://maven.ej-technologies.com/repository'
    }
  }

  dependencies {
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
    classpath 'com.install4j:gradle-plugin:6.0'
  }
}

plugins {
  id "org.sonarqube" version "1.0"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'install4j'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = '0.4.5-alpha'

mainClassName = "com.faforever.client.Main"
applicationDefaultJvmArgs = ["-Djava.library.path=../lib"]

sonarqube {
  properties {
    property "sonar.host.url", "http://home.micheljung.ch/sonar"
    property "sonar.jdbc.url", "jdbc:mysql://home.micheljung.ch:3306/sonar"
    property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
  }
}

jacocoTestReport {
  reports {
    xml.enabled = true
  }
}

idea {
  project {
    jdkName = JavaVersion.VERSION_1_8
    languageLevel = JavaVersion.VERSION_1_8
    vcs = 'Git'
  }
  module {
    downloadJavadoc = false
    downloadSources = true
  }
}

jar {
  manifest {
    attributes "Implementation-Title": "Downlord's FAF Client",
        "Implementation-Version": version
  }
}

task copyNativeLibs(type: Copy) {
  from "src/main/native"
  into "$buildDir/native"
}

applicationDistribution.from(copyNativeLibs) {
  into "lib"
}

// Uncomment when doing a release build. I have yet to find out how to make an install4j installation optional
//install4j {
//  installDir = file(install4jHomeDir)
//}

task buildInstaller(type: Install4jTask) {
  dependsOn 'installDist'

  projectFile = file('downlords-faf-client.install4j')
  release = version
}
task wrapper(type: Wrapper) {
  gradleVersion = '2.4'
}

repositories {
  mavenCentral()
}

jacoco {
  toolVersion = "0.7.4.201502262128"
}

dependencies {
  testCompile group: 'junit', name: 'junit', version: '4.11'
  testCompile 'org.hamcrest:hamcrest-integration:1.3'
  testCompile 'org.mockito:mockito-core:2.0.13-beta'
  testCompile "org.testfx:testfx-core:4.0.+"
  testCompile "org.testfx:testfx-junit:4.0.+"
  testCompile "nl.jqno.equalsverifier:equalsverifier:1.7.3"
  testCompile "nl.jqno.equalsverifier:equalsverifier:1.7.3"

  compile 'com.google.code.gson:gson:2.3.1'
  compile 'org.springframework:spring-beans:4.0.5.RELEASE'
  compile 'org.springframework:spring-context:4.0.5.RELEASE'
  compile 'org.springframework:spring-context-support:4.0.5.RELEASE'
  compile 'org.springframework:spring-core:4.0.5.RELEASE'
  compile 'org.springframework:spring-test:4.0.5.RELEASE'
  compile 'org.pircbotx:pircbotx:2.0.1'
  compile 'ch.qos.logback:logback-classic:1.0.13'
  compile 'ch.qos.logback:logback-core:1.0.13'
  compile 'org.slf4j:slf4j-api:1.7.2'
  compile 'org.apache.commons:commons-compress:1.9'
  compile 'org.apache.httpcomponents:httpclient:4.4.1'
  compile 'net.java.dev.jna:jna:4.1.0'
  compile 'net.java.dev.jna:jna-platform:4.1.0'
  compile('org.controlsfx:controlsfx:8.40.9') {
    exclude module: 'openjfx-dialogs'
  }
  compile 'org.eclipse.jgit:org.eclipse.jgit:4.0.0.201505260635-rc2'
  compile 'org.jetbrains:annotations:13.0'
  compile 'net.sf.jtidy:jtidy:r938'
  compile 'com.neovisionaries:nv-i18n:1.15'
  compile 'org.slf4j:jul-to-slf4j:1.7.12'
  compile 'org.bitlet:weupnp:0.1.3'
  compile 'com.rometools:rome:1.5.0'
  compile 'net.sf.ehcache:ehcache:2.10.0'
}
