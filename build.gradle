import com.install4j.gradle.Install4jTask
import org.gradle.internal.os.OperatingSystem

buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
  id 'org.springframework.boot' version '2.7.15'
  id "com.install4j.gradle" version "10.0.6"
  id "de.undercouch.download" version "5.4.0"
  id 'jacoco'
  id 'java'
  id 'distribution'
}

tasks.withType(Test) {
  String ANSI_BOLD_WHITE = "\u001B[0;1m";
  String ANSI_RESET = "\u001B[0m";
  String ANSI_BLACK = "\u001B[30m";
  String ANSI_RED = "\u001B[31m";
  String ANSI_GREEN = "\u001B[32m";
  String ANSI_YELLOW = "\u001B[33m";
  String ANSI_BLUE = "\u001B[34m";
  String ANSI_PURPLE = "\u001B[35m";
  String ANSI_CYAN = "\u001B[36m";
  String ANSI_WHITE = "\u001B[37m";
  String CHECK_MARK = "\u2713";
  String NEUTRAL_FACE = "\u0CA0_\u0CA0";
  String X_MARK = "\u274C";
  String indent = '\t';

  def outputCache = new HashMap<TestDescriptor, List<String>>()

  beforeTest { TestDescriptor descriptor -> outputCache.put(descriptor, new ArrayList()) }

  onOutput { TestDescriptor descriptor, TestOutputEvent testOutputEvent ->

    def outputLines = outputCache.get(descriptor)
    if (outputLines != null) {
      outputLines.add(testOutputEvent.getMessage())
    }
  }

  afterTest { TestDescriptor descriptor, TestResult result ->
    if (result.failedTestCount > 0) {
      String output = outputCache.remove(descriptor).join(indent)


      def nameParts = descriptor.parent.name.split("\\.")
      def simpleParentName  = nameParts[nameParts.length - 1]

      out.println()
      out.println(simpleParentName + " > " + descriptor.name + " STANDARD_OUT")
      out.println(indent + output)
      out.println()
    }
  }

  afterSuite { desc, result ->
    if (!desc.parent) { // will match the outermost suite
      def failStyle = ANSI_RED
      def skipStyle = ANSI_YELLOW
      def summaryStyle = ANSI_WHITE

      switch (result.resultType) {
        case TestResult.ResultType.SUCCESS:
          summaryStyle = ANSI_GREEN;
          break;
        case TestResult.ResultType.FAILURE:
          summaryStyle = ANSI_RED;
          break;
      }

      out.println("--------------------------------------------------------------------------");
      out.println("Results: " + summaryStyle + " ${result.resultType} " + ANSI_RESET
              + " (${result.testCount} tests, "
              + ANSI_GREEN + " ${result.successfulTestCount} passed " + ANSI_RESET
              + ", " + failStyle + " ${result.failedTestCount} failed " + ANSI_RESET
              + ", " + skipStyle + " ${result.skippedTestCount} skipped " + ANSI_RESET
              + ")");
      out.println("--------------------------------------------------------------------------");
    }
  }

}

//Specify jacoco version to work with java18
jacoco {
  toolVersion = "0.8.8"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'distribution'


sourceCompatibility = JavaVersion.VERSION_18
targetCompatibility = JavaVersion.VERSION_18

// These are read from gradle.properties
version "${version}"
project.ext.javafxPlatform = "${javafxPlatform}"

bootJar.enabled = false
jar.enabled = true

if (javafxPlatform == "unspecified") {
  switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
      project.ext.javafxPlatform = "linux"
      break
    case OperatingSystem.MAC_OS:
      project.ext.javafxPlatform = "mac"
      break
    case OperatingSystem.WINDOWS:
      project.ext.javafxPlatform = "win"
      break
  }
}
println "Platform is: ${javafxPlatform}"

compileJava.dependsOn(processResources)
processResources {
  filesMatching('**/application.yml') {
    filter {
      it.replace('#faf-client.version#', project.version.toString())
    }
  }
}

configurations {
  compile.exclude module: "assertj-core"
}

jacocoTestReport {
  reports {
    xml.getRequired().set(true)
    html.getRequired().set(false)
  }
}

test {
  useJUnitPlatform()
  systemProperties = [
          'junit.jupiter.execution.parallel.enabled': true
  ]
  testLogging {
    exceptionFormat = 'full'
  }
}

configurations {
  codacy
}


bootRun {
  mainClass = "com.faforever.client.Main"
    jvmArgs = [
            "-DnativeDir=build/resources/native",
            "-Dprism.dirtyopts=false",
            "-Dprism.forceGPU=true",
            "-Xms128m",
            "-Xmx712m",
            "-XX:MinHeapFreeRatio=15",
            "-XX:MaxHeapFreeRatio=33",
            "-XX:+HeapDumpOnOutOfMemoryError",
            "-XX:+UseStringDeduplication",
            "-XX:ConcGCThreads=1",
            "-XX:ParallelGCThreads=1",
            "-XX:+UseG1GC",
            "-javaagent:webview-patch/build/libs/webview-patch.jar",
            "-Djava.net.preferIPv4Stack=true",
            "-XX:TieredStopAtLevel=1"
    ]
}

jar {
  manifest {
    attributes "Main-Class": "com.faforever.client.Main",
        "Implementation-Title": "TAF Client",
        "Implementation-Version": archiveVersion,
        "Implementation-Vendor": "TA Forever"
  }
}

distributions {
  main {
    contents {
      from {
        [
            configurations.runtimeClasspath,
            jar,
            downloadIceAdapter.outputs.files,
            downloadUnixUid.outputs.files,
            downloadWindowsUid.outputs.files
        ]
      }
      exclude('**/i4jruntime*.jar')
    }
  }
}

install4j {
  if (project.hasProperty('install4jHomeDir')) {
    installDir = file(install4jHomeDir)
  }
  if (project.hasProperty('install4jLicense')) {
    license = install4jLicense
  }
}

task buildInstall4jMediaFiles(type: Install4jTask) {
  group "distribution"
  description 'Creates install4j media files'
  dependsOn 'installDist'

  projectFile = file('downlords-taf-client.install4j')
  release = version

  switch (project.ext.javafxPlatform) {
    case "linux":
      mediaTypes = ['unixInstaller', 'unixArchive']
      break
    case "mac":
      mediaTypes = ['macos', 'macosFolder', 'macosArchive', 'macosFolderArchive']
      break
    case "win":
      mediaTypes = ['windows']
      break
  }

  doFirst {
    println "Building version ${version}"
    if (!project.hasProperty('install4jHomeDir')) {
      throw new RuntimeException('Specify install4jHomeDir in gradle.properties and set it to an install4j installation directory')
    }
  }
}

task downloadIceAdapter(type: Download) {
  group "native dependencies"
  // src "https://github.com/FAForever/java-ice-adapter/releases/download/v${faf_ice_adapter_version}/faf-ice-adapter-v${faf_ice_adapter_version}-nojfx.jar"
  src "https://cdn.discordapp.com/attachments/830738287752380436/1158622779256606800/faf-ice-adapter.jar?ex=6549be0c&is=6537490c&hm=e98c45e2e79fe0d67faa30dbcb3a35232d0644a882efcbf162772997875a3db5&"
  dest file("${buildDir}/resources/native/faf-ice-adapter.jar")
  onlyIfNewer true
}

task downloadUnixUid(type: Download) {
  group "native dependencies"
  src "https://github.com/FAForever/uid/releases/download/v${faf_uid_version}/faf-uid"
  dest file("${buildDir}/resources/native/faf-uid")
  onlyIfNewer true
  doLast {
    file("${buildDir}/resources/native/faf-uid").setExecutable(true, false)
  }
}

task downloadWindowsUid(type: Download) {
  group "native dependencies"
  src "https://github.com/FAForever/uid/releases/download/v${faf_uid_version}/faf-uid.exe"
  dest file("${buildDir}/resources/native/faf-uid.exe")
  onlyIfNewer true
}

task downloadUnixTafToolbox(type: Download) {
  group "native dependencies"
  src "https://github.com/ta-forever/taftoolbox/releases/download/v${taftoolbox_version}/taftoolbox-ubuntu-focal-x64.tar.gz"
  dest file("${buildDir}/resources/taftoolbox-ubuntu-focal-x64.tar.gz")
  onlyIfNewer true
}

task downloadWindowsGpgnet4Ta(type: Download) {
  group "native dependencies"
  src "https://github.com/ta-forever/gpgnet4ta/releases/download/${gpgnet4ta_version}/gpgnet4ta-win-x86.zip"
  dest file("${buildDir}/resources/gpgnet4ta-win-x86.zip")
  onlyIfNewer true
}

task downloadUnixGpgnet4Ta(type: Download) {
  group "native dependencies"
  src "https://github.com/ta-forever/gpgnet4ta/releases/download/${gpgnet4ta_version}/gpgnet4ta-ubuntu-focal-x64.tar.gz"
  dest file("${buildDir}/resources/gpgnet4ta-ubuntu-focal-x64.tar.gz")
  onlyIfNewer true
}

task downloadWindowsTafToolbox(type: Download) {
  group "native dependencies"
  src "https://github.com/ta-forever/taftoolbox/releases/download/v${taftoolbox_version}/taftoolbox-win-x86.zip"
  dest file("${buildDir}/resources/taftoolbox-win-x86.zip")
  onlyIfNewer true
}

task extractWindowsTafToolbox(type: Copy, dependsOn: [downloadWindowsTafToolbox]) {
  group "native dependencies"
  def zipFile = file("${buildDir}/resources/taftoolbox-win-x86.zip")
  def outputDir = file("${buildDir}/resources/native")
  from zipTree(zipFile)
  into outputDir
}

task extractWindowsGpgnet4Ta(type: Copy, dependsOn: [downloadWindowsGpgnet4Ta, extractWindowsTafToolbox]) {
  group "native dependencies"
  def zipFile = file("${buildDir}/resources/gpgnet4ta-win-x86.zip")
  def outputDir = file("${buildDir}/resources/native")
  from zipTree(zipFile)
  into outputDir
}

task extractUnixTafToolbox(type: Copy, dependsOn: [downloadUnixTafToolbox, extractWindowsGpgnet4Ta]) {
  group "native dependencies"
  def zipFile = file("${buildDir}/resources/taftoolbox-ubuntu-focal-x64.tar.gz")
  def outputDir = file("${buildDir}/resources/native")
  from tarTree(resources.gzip(zipFile))
  into outputDir
}

task extractUnixGpgnet4Ta(type: Copy, dependsOn: [downloadUnixGpgnet4Ta, extractWindowsGpgnet4Ta, extractUnixTafToolbox]) {
  group "native dependencies"
  def zipFile = file("${buildDir}/resources/gpgnet4ta-ubuntu-focal-x64.tar.gz")
  def outputDir = file("${buildDir}/resources/native")
  from tarTree(resources.gzip(zipFile))
  into outputDir
}

task downloadNativeDependencies(dependsOn: [downloadUnixUid, downloadWindowsUid, downloadIceAdapter, extractUnixGpgnet4Ta, extractWindowsGpgnet4Ta, extractUnixTafToolbox, extractWindowsTafToolbox]) {
//task downloadNativeDependencies(dependsOn: [downloadUnixUid, downloadWindowsUid, extractUnixGpgnet4Ta, extractWindowsGpgnet4Ta, extractUnixTafToolbox, extractWindowsTafToolbox]) {
//task downloadNativeDependencies(dependsOn: [downloadUnixUid, downloadWindowsUid, extractUnixTafToolbox, extractWindowsTafToolbox]) {
//task downloadNativeDependencies(dependsOn: [downloadUnixUid, downloadWindowsUid, downloadIceAdapter]) {
//task downloadNativeDependencies(dependsOn: []) {
  group "native dependencies"
}

compileJava.dependsOn 'downloadNativeDependencies'
compileJava.dependsOn ':webview-patch:build'

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
  main = "com.codacy.CodacyCoverageReporter"
  classpath = configurations.codacy
  args = ["-l", "Java", "-r", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"]
}

repositories {
  mavenCentral()
  maven { url "https://jitpack.io" }
  maven { url 'https://maven.ej-technologies.com/repository' }
  maven { url 'https://bio.informatik.uni-jena.de/repository/libs-release-oss' }  // jsmartgraph
}

dependencies {
  implementation("net.sf.sevenzipjbinding:sevenzipjbinding:16.02-2.01")
  implementation("net.sf.sevenzipjbinding:sevenzipjbinding-all-platforms:16.02-2.01")
  implementation("com.brunomnsilva:JavaFXSmartGraph:0.9.2")

  implementation("org.springframework.boot:spring-boot-starter:2.7.15")
  implementation("org.springframework.boot:spring-boot-starter-cache:2.7.15")
  implementation("org.springframework.boot:spring-boot-starter-logging:2.7.15")
  implementation("org.springframework.boot:spring-boot-starter-websocket:2.7.15")
  implementation("org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.6.8")
  implementation("org.springframework:spring-web:5.3.29")
  implementation("org.springframework:spring-websocket:5.3.29")

  implementation("com.github.FAForever:faf-java-commons:c1db35776a062a4f345cd6e17366dddd8b09492f") {
    exclude module: 'guava'
  }
  implementation("com.google.code.gson:gson:2.8.5")
  implementation("com.google.guava:guava:31.0.1-jre")
  implementation("org.apache.commons:commons-compress:1.21")
  implementation("net.java.dev.jna:jna:5.10.0")
  implementation("net.java.dev.jna:jna-platform:5.10.0")
  implementation("org.eclipse.jgit:org.eclipse.jgit:6.3.0.202209071007-r")
  implementation("org.eclipse.jgit:org.eclipse.jgit.lfs:6.3.0.202209071007-r")
  implementation("org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:6.3.0.202209071007-r")
  implementation("org.jetbrains:annotations:23.0.0")
  implementation("com.neovisionaries:nv-i18n:1.29")
  implementation("com.rometools:rome:1.16.0")
  implementation("org.jsoup:jsoup:1.14.3")
  implementation("com.nativelibs4java:bridj:0.7.0")
  implementation("com.github.luben:zstd-jni:1.5.0-5")
  implementation("io.github.micheljung:nocatch:2.0")
  implementation("org.luaj:luaj-jse:3.0.1")
  implementation("commons-validator:commons-validator:1.7")
  implementation("com.github.micheljung:JJsonRpc:01a7fba5f4")
  implementation("javax.inject:javax.inject:1")
  implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
  implementation("com.github.rutledgepaulv:q-builders:1.6")
  implementation("com.github.nsp:JSkills:8b333ec63d")
  implementation("com.github.jasminb:jsonapi-converter:0.11")
  implementation("javax.annotation:javax.annotation-api:1.3.2")
  implementation("com.github.ben-manes.caffeine:caffeine")
  implementation("org.apache.httpcomponents:httpclient:4.5.14")
  implementation("io.github.micheljung:fxstage:0.8.2")
  implementation("io.github.micheljung:jfx-waitomo-theme:0.3.0")
  implementation("org.kitteh.irc:client-lib:8.0.0")

  def javafxVersion = "20"
  implementation("org.openjfx:javafx-base:${javafxVersion}:${javafxPlatform}")
  implementation("org.openjfx:javafx-controls:${javafxVersion}:${javafxPlatform}")
  implementation("org.openjfx:javafx-graphics:${javafxVersion}:${javafxPlatform}")
  implementation("org.openjfx:javafx-swing:${javafxVersion}:${javafxPlatform}")
  implementation("org.openjfx:javafx-fxml:${javafxVersion}:${javafxPlatform}")
  implementation("org.openjfx:javafx-web:${javafxVersion}:${javafxPlatform}")
  implementation("org.openjfx:javafx-media:${javafxVersion}:${javafxPlatform}")
  implementation("com.github.1-alex98:discord-rpc:1.6.2-jna")
  implementation("org.controlsfx:controlsfx:11.1.1")
  implementation("org.fxmisc.flowless:flowless:0.6.7")

  implementation(project(":webview-patch"))
  implementation("org.javassist:javassist:${project.ext['javassist.version']}")

  implementation("com.install4j:install4j-runtime:10.0.3")

  testImplementation("com.squareup.okhttp3:okhttp")
  testImplementation("com.squareup.okhttp3:mockwebserver")
  testImplementation("io.projectreactor:reactor-test")
  testImplementation("org.testfx:testfx-core:4.0.16-alpha") {
    exclude module: 'guava'
  }
  testImplementation("io.projectreactor.netty:reactor-netty:1.0.14")
  testImplementation("org.testfx:testfx-junit:4.0.15-alpha")
  testImplementation("com.natpryce.hamcrest:hamcrest-reflection:0.1-2")
  testImplementation("org.springframework.boot:spring-boot-starter-test")
  testImplementation("org.testfx:openjfx-monocle:jdk-12.0.1+2")

  annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

  def lombokVersion = "1.18.24" // version to support Java 18
  annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
  testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
  compileOnly("org.projectlombok:lombok:${lombokVersion}")
  testCompileOnly("org.projectlombok:lombok:${lombokVersion}")

  codacy("com.github.codacy:codacy-coverage-reporter:-SNAPSHOT")
}
