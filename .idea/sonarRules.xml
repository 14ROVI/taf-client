<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="rules">
    <option name="sonarRulesByRuleKey">
      <map>
        <entry key="squid:HiddenFieldCheck">
          <value>
            <Rule>
              <option name="htmlDesc" value="&lt;p&gt;Shadowing fields with a local variable or with a method parameter is a bad practice reducing code readability: It makes it confusing to know whether the field or the variable is and should be accessed.&lt;/p&gt;&#10;&lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&#10;class Foo {&#10;  public int myField;&#10;&#10;  public void doSomething() {&#10;    int myField = 0;&#10;    ...&#10;  }&#10;&#10;  public void doSomethingElse(int myField) {&#10;    ...&#10;  }&#10;}&#10;&lt;/pre&gt;&#10;&lt;h2&gt;Exceptions&lt;/h2&gt;&#10;&#10;&lt;p&gt;Constructors and setters are exceptions; it is common practice to name arguments for the fields the values will be assigned to. Static methods are also excepted.&lt;/p&gt;&#10;&lt;pre&gt;&#10;class Foo {&#10;  public int myField;&#10;&#10;  public Foo(int myField) {&#10;    this.myField = myField;&#10;  }&#10;&#10;  public static Foo build(int myField) {&#10;    ...&#10;  }&#10;&#10;  public void setMyField(int myField){&#10;    this.myField = myField;&#10;  } &#10;}&#10;&lt;/pre&gt;" />
              <option name="key" value="squid:HiddenFieldCheck" />
              <option name="langName" value="Java" />
              <option name="name" value="Local variables should not shadow class fields" />
              <option name="severity" value="MAJOR" />
            </Rule>
          </value>
        </entry>
        <entry key="squid:IndentationCheck">
          <value>
            <Rule>
              <option name="htmlDesc" value="&lt;p&gt;Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers on a team also reduces the differences that are committed to source control systems, making code reviews easier. &lt;/p&gt;&#10;&lt;p&gt;By default this rule checks that each block of code is indented but not the size of this indent. The parameter &quot;indentSize&quot; allows the expected indent size to be defined. Only the first line of a badly indented section is reported.&lt;/p&gt;&#10;&lt;p&gt;The following code illustrates this rule when the expected indent size is set to 2:&lt;/p&gt;&#10;&lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&#10;class Foo {&#10;  public int a; &#10;   public int b;   // Noncompliant, expected to start at column 4&#10;&#10;...&#10;&#10;  public void doSomething() {&#10;    if(something) {&#10;          doSomethingElse();  // Noncompliant, expected to start at column 6&#10;  }   // Noncompliant, expected to start at column 4&#10;  }&#10;}&#10;&lt;/pre&gt;&#10;&lt;h2&gt;Compliant Solution&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&#10;class Foo {&#10;  public int a; &#10;  public int b; &#10;&#10;...&#10;&#10;  public void doSomething() {&#10;    if(something) {&#10;        doSomethingElse();&#10;    } &#10;  }&#10;}&#10;&lt;/pre&gt;" />
              <option name="key" value="squid:IndentationCheck" />
              <option name="langName" value="Java" />
              <option name="name" value="Source code should be indented consistently" />
              <option name="severity" value="MINOR" />
            </Rule>
          </value>
        </entry>
        <entry key="squid:S1132">
          <value>
            <Rule>
              <option name="htmlDesc" value="&lt;p&gt;&#10;It is preferable to place string literals on the left-hand side of an &lt;code&gt;equals()&lt;/code&gt; or &lt;code&gt;equalsIgnoreCase()&lt;/code&gt; method call.&#10;This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;The following code:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&#10;String myString = null;&#10;&#10;System.out.println(&quot;Equal? &quot; + myString.equals(&quot;foo&quot;));                        // Non-Compliant - will raise a NPE&#10;System.out.println(&quot;Equal? &quot; + (myString != null &amp;&amp; myString.equals(&quot;foo&quot;)));  // Non-Compliant - null check could be removed&#10;&lt;/pre&gt;&#10;&#10;&lt;p&gt;should be refactored into:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&#10;System.out.println(&quot;Equal?&quot; + &quot;foo&quot;.equals(myString));                         // Compliant - properly deals with the null case&#10;&lt;/pre&gt;" />
              <option name="key" value="squid:S1132" />
              <option name="langName" value="Java" />
              <option name="name" value="Strings literals should be placed on the left side when checking for equality" />
              <option name="severity" value="MAJOR" />
            </Rule>
          </value>
        </entry>
        <entry key="squid:S1166">
          <value>
            <Rule>
              <option name="htmlDesc" value="&lt;p&gt;When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.&lt;/p&gt;&#10;&lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&#10; // Noncompliant - exception is lost&#10;try { /* ... */ } catch (Exception e) { LOGGER.info(&quot;context&quot;); }   &#10;&#10;// Noncompliant - exception is lost (only message is preserved)       &#10;try { /* ... */ } catch (Exception e) { LOGGER.info(e.getMessage()); }   &#10;&#10;// Noncompliant - exception is lost &#10;try { /* ... */ } catch (Exception e) { throw new RuntimeException(&quot;context&quot;); }&#10;&lt;/pre&gt;&#10;&lt;h2&gt;Compliant Solution&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&#10;try { /* ... */ } catch (Exception e) { LOGGER.info(e); }   &#10;&#10;try { /* ... */ } catch (Exception e) { throw new RuntimeException(e); }&#10;&#10;try {&#10;  /* ... */&#10;} catch (RuntimeException e) {&#10;  doSomething();&#10;  throw e;&#10;} catch (Exception e) {&#10;  // Conversion into unchecked exception is also allowed&#10;  throw new RuntimeException(e);&#10;}&#10;&lt;/pre&gt;&#10;&lt;h2&gt;Exceptions&lt;/h2&gt;&#10;&#10;&lt;p&gt;&lt;code&gt;InterruptedException&lt;/code&gt;, &lt;code&gt;NumberFormatException&lt;/code&gt;, &lt;code&gt;ParseException&lt;/code&gt; and &lt;code&gt;MalformedURLException&lt;/code&gt; exceptions are arguably used to indicate nonexceptional outcomes.&lt;/p&gt;&#10;&lt;p&gt;Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are correctly handled.&lt;/p&gt;&#10;&lt;pre&gt;&#10;int myInteger;&#10;try {&#10;  myInteger = Integer.parseInt(myString);&#10;} catch (NumberFormatException e) {&#10;  // It is perfectly acceptable to not handle &quot;e&quot; here&#10;  myInteger = 0;&#10;}&#10;&#10;&lt;/pre&gt;" />
              <option name="key" value="squid:S1166" />
              <option name="langName" value="Java" />
              <option name="name" value="Exception handlers should preserve the original exception" />
              <option name="severity" value="CRITICAL" />
            </Rule>
          </value>
        </entry>
        <entry key="squid:S1210">
          <value>
            <Rule>
              <option name="htmlDesc" value="&lt;p&gt;&#10;According to the Java &lt;code&gt;Comparable.compareTo(T o)&lt;/code&gt; documentation:&#10;&lt;/p&gt;&#10;&#10;&lt;blockquote&gt;&#10;It is strongly recommended, but not strictly required that &lt;code&gt;(x.compareTo(y)==0) == (x.equals(y))&lt;/code&gt;.&#10;Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.&#10;The recommended language is &quot;Note: this class has a natural ordering that is inconsistent with equals.&quot;&#10;&lt;/blockquote&gt;&#10;&#10;&lt;p&gt;&#10;If this rule is violated, weird and unpredictable failures can occur.&#10;For example, in Java 5 the &lt;code&gt;PriorityQueue.remove()&lt;/code&gt; method relied on &lt;code&gt;compareTo()&lt;/code&gt;, but since Java 6 it relies on &lt;code&gt;equals()&lt;/code&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&#10;public class Foo implements Comparable&amp;lt;Foo&amp;gt; {&#10;  @Override&#10;  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden&#10;}&#10;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Compliant Solution&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&#10;public class Foo implements Comparable&amp;lt;Foo&amp;gt; {&#10;  @Override&#10;  public int compareTo(Foo foo) { /* ... */ }      // Compliant&#10;&#10;  @Override&#10;  public boolean equals(Object obj) { /* ... */ }&#10;}&#10;&lt;/pre&gt;" />
              <option name="key" value="squid:S1210" />
              <option name="langName" value="Java" />
              <option name="name" value="&quot;equals(Object obj)&quot; should be overridden along with the &quot;compareTo(T obj)&quot; method" />
              <option name="severity" value="CRITICAL" />
            </Rule>
          </value>
        </entry>
        <entry key="squid:S1213">
          <value>
            <Rule>
              <option name="htmlDesc" value="&lt;p&gt;According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order in the source files:&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt; Class and instance variables&lt;/li&gt;&#10;&lt;li&gt; Constructors&lt;/li&gt;&#10;&lt;li&gt; Methods&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&#10;public class Foo{ &#10;   private int field = 0;&#10;   public boolean isTrue() {...}     &#10;   public Foo() {...}                         // Noncompliant, constructor defined after methods&#10;   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods&#10;}&#10;&lt;/pre&gt;&#10;&lt;h2&gt;Compliant Solution&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&#10;public class Foo{ &#10;   public static final int OPEN = 4;&#10;   private int field = 0;&#10;   public Foo() {...}&#10;   public boolean isTrue() {...}&#10;}&#10;&lt;/pre&gt;" />
              <option name="key" value="squid:S1213" />
              <option name="langName" value="Java" />
              <option name="name" value="The members of an interface declaration or class should appear in a pre-defined order" />
              <option name="severity" value="MINOR" />
            </Rule>
          </value>
        </entry>
        <entry key="squid:S1612">
          <value>
            <Rule>
              <option name="htmlDesc" value="&lt;p&gt;Method/constructor references are more compact and readable than using lambdas, and are therefore preferred.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Noncompliant Code Example&lt;/h2&gt;&#10;&lt;pre&gt;&#10;  List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();&#10;  list.add(0);&#10;  list.add(1);&#10;  list.add(2);&#10;&#10;    list.forEach(n -&gt; { System.out.println(n); });&#10;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Compliant Solution&lt;/h2&gt;&#10;&lt;pre&gt;&#10;  List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();&#10;  list.add(0);&#10;  list.add(1);&#10;  list.add(2);&#10;&#10;  list.forEach(System.out::println);&#10;&lt;/pre&gt;" />
              <option name="key" value="squid:S1612" />
              <option name="langName" value="Java" />
              <option name="name" value="Replace lambdas with method references when possible" />
              <option name="severity" value="MINOR" />
            </Rule>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>